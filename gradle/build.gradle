plugins {
  // https://ysb33rorg.gitlab.io/packer-gradle-plugin/0.3/docs/product-documentation.html
  // https://gitlab.com/ysb33rOrg/packer-gradle-plugin
  id 'org.ysb33r.packer.base'  version '0.3'
  id 'org.ysb33r.packer'       version '0.3'
  
  // https://bmuschko.github.io/gradle-docker-plugin
  // https://github.com/bmuschko/gradle-docker-plugin/releases
  id 'com.bmuschko.docker-remote-api' version '4.9.0'
  
  // http://jruby-gradle.org/base
  // https://github.com/jruby-gradle/jruby-gradle-plugin/releases
  id "com.github.jruby-gradle.base" version "1.7.0"
}

// Import task types
import org.ysb33r.gradle.packer.tasks.*
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*
import com.github.jrubygradle.JRubyExec

packer {
    executable path : '/home/apollo/bin/packer'
}

allprojects {
	apply plugin: 'org.ysb33r.packer.base'
	apply plugin: 'org.ysb33r.packer'
	apply plugin: 'com.bmuschko.docker-remote-api'
	apply plugin: "com.github.jruby-gradle.base"

	dependencies {
		// https://github.com/mizzy/serverspec/releases
	    jrubyExec group: 'rubygems', name: 'serverspec', version: '2.41.4'
		// https://github.com/swipely/docker-api/releases
	    jrubyExec group: 'rubygems', name: 'docker-api', version: '1.34.2'
	}
}



ext.docker_username = "apolloclark"
ext.package_name    = "nodejs"
ext.package_version = "11"
ext.base_image      = "default"
ext.image_name      = "default"
ext.build_date      = new Date().format("yyyyMMdd", TimeZone.getTimeZone('UTC'))



// create dynamic reusable code
subprojects {
	// enable the use of sub-project variables
	afterEvaluate { Project project ->
		task('clean') { //, type: GradleBuild) {
			description = 'Clean any previously built images and containers.'
			inputs.property "build_date", "$project.build_date"
			inputs.property "package_version", "$project.package_version"

			// tasks = ['cleanImage','cleanImageDate','cleanContainer']
			dependsOn 'cleanImage'
			dependsOn 'cleanImageDate'
			dependsOn 'cleanContainer'
		}
		task('cleanImage', type: DockerRemoveImage) {
			description = 'Clean any previously built images.'
			inputs.property "build_date", "$project.build_date"
			inputs.property "package_version", "$project.package_version"

			targetImageId "$docker_username/$package_name:$package_version-${project.image_name}"
			force = true
			onError { exception ->
				if (!exception.message.contains('No such image'))
					throw exception
			}
		}
		task('cleanImageDate', type: DockerRemoveImage) {
			description = 'Clean any previously built images.'
			inputs.property "build_date", "$project.build_date"
			inputs.property "package_version", "$project.package_version"

			targetImageId "$docker_username/$package_name:$package_version-${project.image_name}-$build_date"
			force = true
			onError { exception ->
				if (!exception.message.contains('No such image'))
					throw exception
			}
		}
		task('cleanContainer', type: DockerRemoveContainer) {
			description = 'Clean any previously built containers.'
			inputs.property "build_date", "$project.build_date"
			inputs.property "package_version", "$project.package_version"

			targetContainerId "$package_name-${project.image_name}"
			force = true
			removeVolumes = true
			onError { exception ->
				if (!exception.message.contains('No such container'))
					throw exception
			}
		}
		task('build', type: PackerBuilder) {
			description = 'Build the Docker image.'
			dependsOn 'clean'
			inputs.property "build_date", "$project.build_date"
			inputs.property "package_version", "$project.package_version"
			inputs.file '../../packer_docker.json'
			inputs.files fileTree(dir: "../../scripts")
			inputs.files fileTree(dir: "../../files")
			inputs.files fileTree(dir: "../../ansible", includes: ['**/*.yml'])
		
			setEnvironment System.getenv()
			environment DOCKER_USERNAME : "$docker_username"
			environment PACKAGE         : "$package_name"
			environment PACKAGE_VERSION : "$package_version"
			environment BASE_IMAGE      : "${project.base_image}"
			environment IMAGE_NAME      : "${project.image_name}"

			force true
			parallel true
			buildDir = '../../'
			template '../../packer_docker.json'
			outputDir "${buildDir}"
			outputs.file "manifest.json"
		}
		// http://jruby-gradle.org/base/#tasks
		// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html
		task('testJRuby', type: JRubyExec) {
			description = 'Test the Docker image.'
			dependsOn 'build'
			inputs.property "build_date", "$project.build_date"
			inputs.property "package_version", "$project.package_version"
			inputs.file "manifest.json"
			inputs.files fileTree(dir: "../../spec", includes: ['**/.rb'])

			setEnvironment System.getenv()
			environment DOCKER_USERNAME : "$docker_username"
			environment PACKAGE         : "$package_name"
			environment PACKAGE_VERSION : "$package_version"
			environment IMAGE_NAME      : "${project.image_name}"

			workingDir '../../spec/'
			script "rspec"
			scriptArgs "Dockerfile_${project.image_name}.rb"
		}
		// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html
		task('testExec', type: Exec) {
			description = 'Test the Docker image.'
			// dependsOn 'build'

			setEnvironment System.getenv()
			environment DOCKER_USERNAME : "$docker_username"
			environment PACKAGE         : "$package_name"
			environment PACKAGE_VERSION : "$package_version"
			environment IMAGE_NAME      : "${project.image_name}"

			workingDir '../../spec/'
			executable "rspec"
			args = ["Dockerfile_${project.image_name}.rb"]
		}
	}
}